name: Unified Config Workflow

on:
  push:
    branches:
      - dynamic-wf

jobs:
  generate-config:
    runs-on: ubuntu-latest
    outputs:
      source_system: ${{ steps.set-output.outputs.source_system }}
      destination_system: ${{ steps.set-output.outputs.destination_system }}
      Migration_Validator: ${{ steps.set-output.outputs.migration_validator }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Generate JSON file
        run: >
          echo '{ 
            "Repo1": { 
              "Source_System": "Bitbucket", 
              "Bitbucket_Repo": "https://www.bitbucket-dummy.com/project1/repo1", 
              "Migration_story": "https://www.jira-dummy.com/project1/story1", 
              "Migration_wave": "wave1", 
              "Validate_Repo_Migration": "Y", 
              "Validate_Jenkins_Migration": "Y", 
              "Jenkins_Job": { 
                "Jenkins_Job_Path": "https://www.jenkins-dummy.com/project1", 
                "Jenkins_Job_Name": ["CI_Job1", "CI_Job2", "CI_Job3"] 
              } 
            }, 
            "App_Contact": { 
              "email": "ashish@gmail.com", 
              "phone": "555-555-5555" 
            } 
          }' > config.json

      - name: Display JSON file
        run: cat config.json

      - name: Iterating JSON and set environment variables
        run: |
          json_file="config.json"
          jq -r '.Repo1 | to_entries[]? | select(.value!=null) | "\(.key)=\(.value)"' "$json_file" | while IFS= read -r line; do
            echo "$line" >> $GITHUB_ENV
          done
      # reading the data from the 
      # - name: Read JSON and set environment variables
      #   id: set-output
      #   run: |
      #     json_file="config.json"
      #     jq -r '.Repo1 | to_entries[]? | select(.value!=null) | "\(.key)=\(.value)"' "$json_file" | while IFS= read -r line; do
      #       echo "$line" >> $GITHUB_ENV
      #       if [[ "$line" =~ ^Source_System=.* ]]; then
      #         Source_System="${line#*=}"
      #         if [ "$Source_System" == "Bitbucket" ]; then
      #           echo "::set-output name=source_system::bb"
      #           echo "::set-output name=destination_system::gh"
      #         elif [ "$Source_System" == "ADO" ]; then
      #           echo "::set-output name=source_system::ado"
      #           echo "::set-output name=destination_system::gh"
      #         fi
      #       fi
      #     done

      - name: Read JSON and set environment variables
        id: set-output
        run: |
         echo "source system :" $Source_System
         Source_System=$Source_System
          echo "::set-output name=Source_System::$Source_System"
         if [ "$Source_System" == "Bitbucket" ]; then
          echo "::set-output name=source_system:: "
          echo "::set-output name=destination_system::gh"
          elif [ "$Source_System" == "AzureDevops" ]; then
            echo "::set-output name=source_system::ado"
            echo "::set-output name=destination_system::gh"
          elif [ "$Source_System" == "gh" ]; then
            echo "::set-output name=source_system::gh"
            echo "::set-output name=destination_system::ghE"   
            
         fi




  master-workflow:
    runs-on: ubuntu-latest
    needs: generate-config
    steps:
      - name: Check Environment Variables
        run: |
          if [ -z "${{ needs.generate-config.outputs.source_system  }}" ] || [ -z "${{ needs.generate-config.outputs.destination_system }}" ]; then
           echo "One or both environment variables (SOURCE_SYSTEM, DESTINATION_SYSTEM) are not set. Exiting workflow."
          exit 1
          fi

      - name: Checkout repository
        uses: actions/checkout@v4

      - name: ${{ needs.generate-config.outputs.source_system }} to ${{ needs.generate-config.outputs.destination_system }} Migration
        run: |
          echo "Running ${{ needs.generate-config.outputs.source_system }} to ${{ needs.generate-config.outputs.destination_system }}"



      # - if: needs.generate-config.outputs.source_system !=' ' && needs.generate-config.outputs.destination_system !=' '
      #   name: ${{ needs.generate-config.outputs.source_system }} to ${{ needs.generate-config.outputs.destination_system }} Migration
      #   run: |
      #     echo "Running ${{ needs.generate-config.outputs.source_system }} to ${{ needs.generate-config.outputs.destination_system }}"